apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.aluxian.zerodays"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode gitVersionCode()
        versionName gitVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Remove unused fonts
    applicationVariants.all { variant ->
        variant.mergeAssets.doFirst {
            File fonts = file("${projectDir}/build/intermediates/exploded-aar/" +
                    "com.github.johnkil.android-robototextview/robototextview/2.2.0/assets/fonts")

            if (fonts.exists()) {
                for (File file : fonts.listFiles()) {
                    if (["RobotoSlab-Bold.ttf", "RobotoSlab-Regular.ttf"].indexOf(file.name) == -1) {
                        file.delete()
                    }
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:cardview-v7:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.mcxiaoke.viewpagerindicator:library:2.4.1'
    compile 'uk.co.androidalliance:edgeeffectoverride:1.0.2'
    compile 'com.github.johnkil.android-robototextview:robototextview:2.2.0'
    compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
}

/**
 * Gets the version name from the latest Git tag
 * Tags should be annotated in this format: major.minor.patch[-[alpha|beta]]
 *
 * @example `git tag -a "0.1.0-alpha"`
 * @return App version name
 */
def gitVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'bash', '-c', 'git describe --tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/**
 * Gets the version code by counting the number of commits
 * This way the version code is incremented automatically each release
 *
 * @return App version code
 */
def gitVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'bash', '-c', 'git log | wc -l'
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
}
